import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/enums/CollectionType.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/SearchButtonState.bs"
import "pkg:/source/enums/String.bs"
import "pkg:/source/enums/TaskControl.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub setupNodes()
    m.options = m.top.findNode("options")
    m.itemGrid = m.top.findNode("itemGrid")
    m.voiceBox = m.top.findNode("voiceBox")
    m.voiceBoxBackground = m.top.findNode("voiceBoxBackground")
    m.backdrop = m.top.findNode("backdrop")
    m.newBackdrop = m.top.findNode("backdropTransition")
    m.emptyText = m.top.findNode("emptyText")
    m.selectedItemName = m.top.findNode("selectedItemName")
    m.selectedItemOverview = m.top.findNode("selectedItemOverview")
    m.selectedItemProductionYear = m.top.findNode("selectedItemProductionYear")
    m.selectedItemOfficialRating = m.top.findNode("selectedItemOfficialRating")
    m.itemLogo = m.top.findNode("itemLogo")
    m.swapAnimation = m.top.findNode("backroundSwapAnimation")
    m.alpha = m.top.findNode("alpha")
    m.alphaMenu = m.alpha.findNode("alphaMenu")
    m.communityRatingGroup = m.top.findNode("communityRatingGroup")
    m.criticRatingIcon = m.top.findNode("criticRatingIcon")
    m.criticRatingGroup = m.top.findNode("criticRatingGroup")
    m.overhang = m.top.getScene().findNode("overhang")
    m.genreList = m.top.findNode("genrelist")
    m.infoGroup = m.top.findNode("infoGroup")
    m.star = m.top.findNode("star")
    m.dropdownOptions = m.top.findNode("dropdownOptions")
    m.submitButton = m.top.findNode("submitButton")

    m.sortButton = m.top.findNode("sortButton")
    m.sortButton.textColor = ColorPalette.DARKGREY
    m.sortButton.focusTextColor = ColorPalette.WHITE
    m.sortButton.background = ColorPalette.WHITE
    m.sortButton.focusBackground = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    m.sortOrderButton = m.top.findNode("sortOrderButton")
    m.sortOrderButton.textColor = ColorPalette.DARKGREY
    m.sortOrderButton.focusTextColor = ColorPalette.WHITE
    m.sortOrderButton.background = ColorPalette.WHITE
    m.sortOrderButton.focusBackground = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    m.filterButton = m.top.findNode("filterButton")
    m.filterButton.textColor = ColorPalette.DARKGREY
    m.filterButton.focusTextColor = ColorPalette.WHITE
    m.filterButton.background = ColorPalette.WHITE
    m.filterButton.focusBackground = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    m.viewButton = m.top.findNode("viewButton")
    m.viewButton.textColor = ColorPalette.DARKGREY
    m.viewButton.focusTextColor = ColorPalette.WHITE
    m.viewButton.background = ColorPalette.WHITE
    m.viewButton.focusBackground = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    setSearchBackground(SearchButtonState.INACTIVE)
end sub

sub init()
    m.disabledReason = string.EMPTY
    m.searchButtonDisabled = false
    m.top.optionsAvailable = false
    setupNodes()
    m.bypassSearchEvent = false

    m.itemGrid.focusBitmapBlendColor = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)
    m.genreList.focusBitmapBlendColor = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    m.overhang.isVisible = false

    m.showItemCount = m.global.session.user.settings["itemgrid.showItemCount"]

    m.swapAnimation.observeField("state", "swapDone")
    m.options.observeField("visible", "onOptionsVisibleChange")

    m.loadedRows = 0
    m.loadedItems = 0

    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.observeField("itemFocused", "onItemFocused")
    m.itemGrid.observeFieldScoped("itemSelected", "onItemSelected")
    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.observeFieldScoped("itemSelected", "onGenreItemSelected")
    m.genreList.content = m.genreData

    'Voice filter setup
    m.voiceBox.observeField("text", "onvoiceFilter")

    'backdrop
    m.newBackdrop.observeField("loadStatus", "newBGLoaded")

    'Background Image Queued for loading
    m.queuedBGUri = string.EMPTY

    'Item sort
    m.sortField = "SortName"
    m.sortAscending = true

    m.filter = "All"
    m.filterOptions = {}

    m.view = "presentation"

    m.loadItemsTask1 = createObject("roSGNode", "LoadItemsTask")

    m.loadItemsTask = createObject("roSGNode", "LoadItemsTask2")
    m.loadLogoTask = createObject("roSGNode", "LoadItemsTask2")
    m.getFiltersTask = createObject("roSGNode", "GetFiltersTask")

    'set inital counts for overhang before content is loaded.
    m.loadItemsTask.totalRecordCount = 0

    if not m.global.device.hasVoiceRemote
        m.voiceBox.backgroundUri = "pkg:/images/transparent.png"
        m.voiceBox.translation = "[15, 0]"
        m.voiceBox.width = m.voiceBox.width - 15
    else
        searchPoster = m.voiceBox.getChild(0)
        if isChainValid(searchPoster, "bitmap")
            searchPoster.bitmap = ""
            searchPoster.blendColor = ColorPalette.WHITE
        end if

        searchText = m.voiceBox.getChild(1)
        if isChainValid(searchText, "height")
            searchText.vertAlign = "bottom"
            searchText.height = 37
        end if

        m.micIcon = m.voiceBox.getChild(6)
        if isValid(m.micIcon)
            m.micIcon.observeFieldScoped("blendColor", "onMicIconBlendColorChange")
        end if
    end if
end sub

' VoiceTextEditBox.voiceEnabled doesn't have alwaysNotify enabled
' To trigger a change event, we must change the value to something else, then back to the value we want
sub onVoiceEnabledChange()
    m.voiceBox.voiceEnabled = m.searchButtonDisabled
    m.voiceBox.voiceEnabled = not m.searchButtonDisabled
end sub

sub onMicIconBlendColorChange()
    ' DARKGREY: 269488383
    ' WHITE: -1
    ' LIGHTGREY: -1431655681
    ' HIGHLIGHT: -9934849

    if m.voiceBoxBackground.blendColor = -9934849
        if m.micIcon.blendColor <> -1
            m.micIcon.blendColor = ColorPalette.WHITE
        end if
    else
        if m.micIcon.blendColor <> 269488383
            m.micIcon.blendColor = ColorPalette.DARKGREY
        end if
    end if
end sub

sub OnScreenHidden()
    if not m.overhang.isVisible
        m.overhang.disableMoveAnimation = true
        m.overhang.isVisible = true
        m.overhang.disableMoveAnimation = false
    end if
end sub

sub OnScreenShown()
    m.overhang.isVisible = false

    group = m.global.sceneManager.callFunc("getActiveScene")

    if isValid(m.top.lastFocus)
        m.top.lastFocus.setFocus(true)
        group.lastFocus = m.top.lastFocus

        focusedItem = getItemFocused()

        if isValid(focusedItem)
            m.loadItemsTask1.itemId = focusedItem.LookupCI("id")
            m.loadItemsTask1.observeField("content", "onItemDataLoaded")
            m.loadItemsTask1.itemsToLoad = "metaData"
            m.loadItemsTask1.control = TaskControl.RUN
        end if

    else
        m.top.setFocus(true)
        group.lastFocus = m.top
    end if
end sub

sub onItemDataLoaded()
    itemData = m.loadItemsTask1.content
    m.loadItemsTask1.unobserveField("content")
    m.loadItemsTask1.content = []

    if not isValidAndNotEmpty(itemData) then return

    focusedItem = getItemFocused()
    if not isValid(focusedItem) then return

    focusedItem.callFunc("setWatched", chainLookupReturn(itemData[0], "json.UserData.Played", false), chainLookupReturn(itemData[0], "json.UserData.UnplayedItemCount", 0))
end sub

'
'Load initial set of Data
sub loadInitialItems()
    m.loadItemsTask.control = TaskControl.STOP
    startLoadingSpinner(false)

    if isValid(m.top.parentItem.backdropUrl)
        SetBackground(m.top.parentItem.backdropUrl)
    else
        SetBackground(string.EMPTY)
    end if

    m.sortField = m.global.session.user.settings["display." + m.top.parentItem.Id + ".sortField"]
    m.filter = m.global.session.user.settings["display." + m.top.parentItem.Id + ".filter"]
    m.filterOptions = m.global.session.user.settings["display." + m.top.parentItem.Id + ".filterOptions"]
    m.view = m.global.session.user.settings["display." + m.top.parentItem.Id + ".landing"]
    m.sortAscending = m.global.session.user.settings["display." + m.top.parentItem.Id + ".sortAscending"]

    ' If user has not set a preferred view for this folder, check if they've set a default view
    if not isValid(m.view)
        settingName = `display.${m.top.mediaType}library.defaultview`

        if isStringEqual(m.top.mediaType, ItemType.PHOTOALBUM)
            settingName = `display.${ItemType.PHOTO}library.defaultview`
        end if

        m.view = m.global.session.user.settings[settingName]
    end if

    ' Boxsets are sorted by Premiere Data by default
    if not isValidAndNotEmpty(m.sortField)
        if isStringEqual(getCollectionType(), ItemType.BOXSET)
            m.sortField = "PremiereDate,SortName"
        else if isStringEqual(getCollectionType(), ItemType.MYLIST)
            m.sortField = "OrderAdded"
        else
            m.sortField = "SortName"
        end if
    end if

    if not isValidAndNotEmpty(m.filter) then m.filter = "All"
    if not isValidAndNotEmpty(m.filterOptions) then m.filterOptions = "{}"
    if not isValidAndNotEmpty(m.view) then m.view = "presentation"
    if not isValid(m.sortAscending) then m.sortAscending = true
    if not isStringEqual(type(m.sortAscending), "roBoolean") then m.sortAscending = true

    ' If view is not valid, use default view
    if not inArray(["presentation", "grid", "Genres"], m.view) then m.view = "presentation"

    if isValid(m.top.parentItem.parentFolder)
        if not inArray(["presentation", "grid"], m.view) then m.view = "presentation"
    end if

    m.filterOptions = ParseJson(m.filterOptions)

    m.loadItemsTask.searchTerm = m.top.searchTerm
    m.loadItemsTask.sortField = m.sortField
    m.loadItemsTask.sortAscending = m.sortAscending
    m.loadItemsTask.filter = m.filter
    m.loadItemsTask.filterOptions = m.filterOptions
    m.loadItemsTask.startIndex = 0
    m.loadItemsTask.studioIds = string.EMPTY
    m.loadItemsTask.view = string.EMPTY

    if isStringEqual(m.view, "Genres")
        m.loadItemsTask.view = "Genres"
        m.loadItemsTask.genreIds = m.top.parentItem.id
        m.loadItemsTask.itemId = m.top.parentItem.parentFolder
        m.loadItemsTask.studioIds = m.top.parentItem.Id
        if isStringEqual(m.top.mediaType, ItemType.MUSICVIDEO)
            m.loadItemsTask.recursive = true
        end if
    else if isStringEqual(m.view, "presentation")
        m.loadItemsTask.itemId = m.top.parentItem.Id
        m.loadItemsTask.studioIds = string.EMPTY
        m.loadItemsTask.genreIds = string.EMPTY
    else if isStringEqual(m.view, "grid")
        m.loadItemsTask.itemId = m.top.parentItem.Id
        m.loadItemsTask.studioIds = string.EMPTY
        m.loadItemsTask.genreIds = string.EMPTY
    end if


    if inArray([ItemType.BOXSET, ItemType.PHOTO, ItemType.PHOTOALBUM, ItemType.MUSICVIDEO], m.top.mediaType)
        m.loadItemsTask.recursive = false

        if isStringEqual(m.top.mediaType, ItemType.MUSICVIDEO)
            ' Sort folders to the top of results
            m.loadItemsTask.sortField = `IsFolder,${m.sortField}`
            m.loadItemsTask.itemType = `${ItemType.MUSICVIDEO},${ItemType.FOLDER}`
            m.loadItemsTask.passToItem = {
                collectionType: ItemType.MUSICVIDEO
            }
        end if

        if isStringEqual(m.top.mediaType, ItemType.BOXSET)
            if not isStringEqual(m.top.parentItem.LookupCI("type"), ItemType.BOXSET)
                if m.loadItemsTask.searchTerm <> string.EMPTY
                    m.loadItemsTask.itemType = ItemType.BOXSET
                    m.loadItemsTask.recursive = true
                end if
            else
                if isValid(m.top.parentItem.parentFolder)
                    disableSearch(tr("Search is unavailable because the API does not support searching inside boxsets."))
                end if
            end if
        end if
    else
        m.loadItemsTask.itemType = m.top.mediaType
    end if

    ' We're in a genre sub folder
    if isValid(m.top.parentItem.parentFolder) and not isStringEqual(getCollectionType(), CollectionType.BOXSET)
        if not inArray([ItemType.PHOTOALBUM, ItemType.MUSICVIDEO], m.top.mediaType)
            m.loadItemsTask.itemId = m.top.parentItem.parentFolder
            m.loadItemsTask.genreIds = m.top.parentItem.id
        end if
    end if

    ' We're inside a music video genre sub folder
    if isStringEqual(m.top.mediaType, ItemType.MUSICVIDEO)
        if isStringEqual(chainLookup(m.top.parentItem, "itemType"), `${ItemType.MUSICVIDEO},${ItemType.FOLDER}`)
            m.loadItemsTask.itemId = m.top.parentItem.id
            m.loadItemsTask.genreIds = m.top.parentItem.id
            m.loadItemsTask.itemType = ItemType.MUSICVIDEO
            m.loadItemsTask.recursive = true
        end if
    end if

    m.dropdownOptions.translation = "[100, 540]"
    m.itemGrid.translation = "[100, 670]"
    m.emptyText.translation = "[0, 750]"
    m.itemGrid.itemSpacing = "[20, 20]"
    m.itemGrid.numRows = 3

    m.selectedItemOverview.visible = true
    m.infoGroup.visible = true
    m.top.showItemTitles = "hidealways"

    m.itemLogo.visible = false
    m.backdrop.opacity = 1
    m.newBackdrop.opacity = 0

    m.emptyText.visible = false


    if isStringEqual(m.view, "grid")
        m.top.showItemTitles = m.global.session.user.settings["itemgrid.gridTitles"]
        m.backdrop.opacity = 0
        m.newBackdrop.opacity = 0
        m.itemLogo.visible = false
        m.itemGrid.translation = "[100, 210]"
        m.emptyText.translation = "[0, 540]"
        m.dropdownOptions.translation = "[100, 60]"
        m.itemGrid.numRows = "3"
        m.selectedItemOverview.visible = false
        m.selectedItemName.visible = false
        m.infoGroup.visible = false

    else if isStringEqual(m.view, "Genres")
        m.top.showItemTitles = m.global.session.user.settings["itemgrid.gridTitles"]
        m.backdrop.opacity = 0
        m.newBackdrop.opacity = 0
        m.itemLogo.visible = false
        m.itemGrid.translation = "[100, 210]"
        m.emptyText.translation = "[0, 540]"
        m.dropdownOptions.translation = "[100, 60]"
        m.itemGrid.numRows = "3"
        m.selectedItemOverview.visible = false
        m.selectedItemName.visible = false
        m.infoGroup.visible = false
    end if

    if isStringEqual(m.top.mediaType, ItemType.MYLIST)
        disableSearch(tr("Search is unavailable because the API does not support searching inside My List."))

        m.itemGrid.itemComponentName = "GridItemMedium"
        m.itemGrid.itemSize = "[400, 330]"
        m.itemGrid.rowHeights = "[330]"
        m.itemGrid.itemSpacing = "[40, 20]"
        m.itemGrid.numColumns = 4
        m.top.imageDisplayMode = "scaleToZoom"
    end if

    if isStringEqual(m.top.mediaType, ItemType.MUSICVIDEO)
        m.itemGrid.itemComponentName = "GridItemMedium"
        m.itemGrid.itemSize = "[400, 330]"
        m.itemGrid.rowHeights = "[330]"
        m.itemGrid.itemSpacing = "[40, 20]"
        m.itemGrid.numColumns = 4
        m.top.imageDisplayMode = "scaleToZoom"

        m.genreList.itemComponentName = "GridItemMedium"
        m.genreList.rowItemSize = "[[400, 330]]"
        m.genreList.rowHeights = "[360]"
    end if

    if inArray([ItemType.PHOTO, ItemType.PHOTOALBUM], m.top.mediaType)
        m.itemGrid.itemComponentName = "GridItemMedium"
        m.itemGrid.itemSize = "[400, 330]"
        m.itemGrid.rowHeights = "[330]"
        m.itemGrid.itemSpacing = "[40, 20]"
        m.itemGrid.numColumns = 4
        m.top.imageDisplayMode = "scaleToZoom"

        m.genreList.itemComponentName = "GridItemMedium"
        m.genreList.rowItemSize = "[[400, 330]]"
        m.genreList.rowHeights = "[360]"
    end if

    if not inArray([ItemType.PHOTO, ItemType.PHOTOALBUM, ItemType.MUSICVIDEO, ItemType.MYLIST], m.top.mediaType)
        setColumnSizes()
    end if

    m.loadItemsTask.observeField("content", "ItemDataLoaded")
    m.loadItemsTask.control = TaskControl.RUN

    m.getFiltersTask.observeField("filters", "FilterDataLoaded")
    m.getFiltersTask.params = {
        userid: m.global.session.user.id,
        parentid: m.top.parentItem.Id,
        includeitemtypes: m.loadItemsTask.itemType
    }
    m.getFiltersTask.control = "RUN"
end sub

sub setColumnSizes()
    numberOfColumns = chainLookupReturn(m.global.session, "user.settings.numberOfColumns", "7")
    imageWidth = Val(chainLookupReturn(m.global.session, "user.settings.numberOfColumnsData", "230"))

    if isStringEqual(m.top.showItemTitles, "hidealways")
        defaultSize = [imageWidth, CInt(imageWidth * 1.52173)]
    else
        defaultSize = [imageWidth, CInt(imageWidth * 1.69565)]
    end if

    m.itemGrid.itemSize = defaultSize
    m.itemGrid.rowHeights = [defaultSize[1]]
    m.itemGrid.numRows = abs(1180 / (defaultSize[1] + m.itemGrid.itemSpacing[1]))
    m.itemGrid.numColumns = numberOfColumns

    m.genreList.itemSize = [1900, defaultSize[1] + 30]
    m.genreList.rowItemSize = [defaultSize]
    m.genreList.rowHeights = [defaultSize[1] + 30]
    m.genreList.numRows = abs(1180 / (defaultSize[1] + m.genreList.itemSpacing[1]))
end sub

function setOptions() as object
    if isStringEqual(m.top.mediaType, ItemType.MOVIE)
        return setMovieOptions()
    end if

    if isStringEqual(m.top.mediaType, ItemType.BOXSET)
        return setMovieOptions()
    end if

    if isStringEqual(m.top.mediaType, ItemType.MYLIST)
        return setMovieOptions()
    end if

    if isStringEqual(m.top.mediaType, ItemType.SERIES)
        return setSeriesOptions()
    end if

    if isStringEqual(m.top.mediaType, ItemType.MUSICVIDEO)
        return setMusicVideoOptions()
    end if

    if inArray([ItemType.PHOTO, ItemType.PHOTOALBUM], m.top.mediaType)
        return setPhotoOptions()
    end if

    return {
        filter: []
    }
end function

' Set view, sort, and filter options
function setMovieOptions() as object
    options = {
        filter: []
    }

    options.views = [
        { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
        { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
    ]

    if not isStringEqual(m.top.mediaType, ItemType.MYLIST)
        options.views.push({ "Title": tr("Genres"), "Name": "Genres", "Track": { "description": tr("Genres") } })
    end if

    options.sort = [
        { "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } },
        { "Title": tr("Community Rating"), "Name": "CommunityRating,SortName", "Track": { "description": tr("Community Rating") } },
        { "Title": tr("Critics Rating"), "Name": "CriticRating,SortName", "Track": { "description": tr("Critics Rating") } },
        { "Title": tr("DATE_ADDED"), "Name": "DateCreated,SortName", "Track": { "description": tr("DATE_ADDED") } },
        { "Title": tr("DATE_PLAYED"), "Name": "DatePlayed,SortName", "Track": { "description": tr("DATE_PLAYED") } },
        { "Title": tr("Parental Rating"), "Name": "OfficialRating,SortName", "Track": { "description": tr("Parental Rating") } },
        { "Title": tr("PLAY_COUNT"), "Name": "PlayCount,SortName", "Track": { "description": tr("PLAY_COUNT") } },
        { "Title": tr("RELEASE_DATE"), "Name": "PremiereDate,SortName", "Track": { "description": tr("RELEASE_DATE") } },
        { "Title": tr("RUNTIME"), "Name": "Runtime,SortName", "Track": { "description": tr("RUNTIME") } },
        { "Title": tr("Random"), "Name": "Random", "Track": { "description": tr("Random") } }
    ]

    options.filter = [
        { "Title": tr("All"), "Name": "All" },
        { "Title": tr("Played"), "Name": "Played" },
        { "Title": tr("Unplayed"), "Name": "Unplayed" },
        { "Title": tr("Resumable"), "Name": "Resumable" },
        { "Title": tr("Favorites"), "Name": "Favorites" }
    ]

    if inArray([ItemType.BOXSET, CollectionType.BOXSETS], getCollectionType())
        options.views = [
            { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
            { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
        ]
    end if

    if inArray([ItemType.MYLIST], getCollectionType())
        options.sort.unshift({ "Title": tr("Order Added"), "Name": "OrderAdded", "Track": { "description": tr("Order Added") } })
    end if

    if isStringEqual(m.view, "genres")
        options.sort = [{ "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } }]
        options.filter = [{ "Title": tr("All"), "Name": "All" }]
    end if

    ' If we're in a genre subfolder
    if isValid(m.top.parentItem.parentFolder)
        options.views = [
            { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
            { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
        ]
    end if

    return options
end function

function setMusicVideoOptions() as object
    options = {
        filter: []
    }

    options.views = [
        { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
        { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } },
        { "Title": tr("Genres"), "Name": "Genres", "Track": { "description": tr("Genres") } }
    ]

    options.sort = [
        { "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } },
        { "Title": tr("Community Rating"), "Name": "CommunityRating,SortName", "Track": { "description": tr("Community Rating") } },
        { "Title": tr("Critics Rating"), "Name": "CriticRating,SortName", "Track": { "description": tr("Critics Rating") } },
        { "Title": tr("DATE_ADDED"), "Name": "DateCreated,SortName", "Track": { "description": tr("DATE_ADDED") } },
        { "Title": tr("DATE_PLAYED"), "Name": "DatePlayed,SortName", "Track": { "description": tr("DATE_PLAYED") } },
        { "Title": tr("Parental Rating"), "Name": "OfficialRating,SortName", "Track": { "description": tr("Parental Rating") } },
        { "Title": tr("PLAY_COUNT"), "Name": "PlayCount,SortName", "Track": { "description": tr("PLAY_COUNT") } },
        { "Title": tr("RELEASE_DATE"), "Name": "PremiereDate,SortName", "Track": { "description": tr("RELEASE_DATE") } },
        { "Title": tr("RUNTIME"), "Name": "Runtime,SortName", "Track": { "description": tr("RUNTIME") } },
        { "Title": tr("Random"), "Name": "Random", "Track": { "description": tr("Random") } }
    ]

    options.filter = [
        { "Title": tr("All"), "Name": "All" },
        { "Title": tr("Played"), "Name": "Played" },
        { "Title": tr("Unplayed"), "Name": "Unplayed" },
        { "Title": tr("Resumable"), "Name": "Resumable" },
        { "Title": tr("Favorites"), "Name": "Favorites" }
    ]

    if isStringEqual(m.view, "genres")
        options.sort = [{ "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } }]
        options.filter = [{ "Title": tr("All"), "Name": "All" }]
    end if

    ' If we're in a genre subfolder
    if isValid(m.top.parentItem.parentFolder)
        options.views = [
            { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
            { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
        ]
    end if

    return options
end function

function setPhotoOptions() as object
    options = {
        filter: []
    }

    options.views = [
        { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
        { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
    ]

    options.sort = [
        { "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } },
        { "Title": tr("DATE_ADDED"), "Name": "DateCreated,SortName", "Track": { "description": tr("DATE_ADDED") } },
        { "Title": tr("Random"), "Name": "Random", "Track": { "description": tr("Random") } }
    ]

    options.filter = [
        { "Title": tr("All"), "Name": "All" },
        { "Title": tr("Favorites"), "Name": "Favorites" }
        { "Title": tr("Item Type"), "Name": "includeItemTypes", "Options": ["Photo", "Photo Album", "Video"], "Delimiter": ",", "CheckedState": [] }
    ]

    return options
end function

function setSeriesOptions() as object
    options = {
        filter: []
    }

    options.views = [
        { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
        { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } },
        { "Title": tr("Genres"), "Name": "Genres", "Track": { "description": tr("Genres") } }
    ]

    options.sort = [
        { "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } },
        { "Title": tr("Community Rating"), "Name": "CommunityRating,SortName", "Track": { "description": tr("Community Rating") } },
        { "Title": tr("Date Show Added"), "Name": "DateCreated,SortName", "Track": { "description": tr("Date Show Added") } },
        { "Title": tr("Date Episode Added"), "Name": "DateLastContentAdded,SortName", "Track": { "description": tr("Date Episode Added") } },
        { "Title": tr("DATE_PLAYED"), "Name": "SeriesDatePlayed,SortName", "Track": { "description": tr("DATE_PLAYED") } },
        { "Title": tr("OFFICIAL_RATING"), "Name": "OfficialRating,SortName", "Track": { "description": tr("OFFICIAL_RATING") } },
        { "Title": tr("RELEASE_DATE"), "Name": "PremiereDate,SortName", "Track": { "description": tr("RELEASE_DATE") } },
        { "Title": tr("Random"), "Name": "Random", "Track": { "description": tr("Random") } }
    ]

    options.filter = [
        { "Title": tr("All"), "Name": "All" },
        { "Title": tr("Played"), "Name": "Played" },
        { "Title": tr("Unplayed"), "Name": "Unplayed" },
        { "Title": tr("Favorites"), "Name": "Favorites" }
    ]

    if isStringEqual(m.view, "genres")
        options.sort = [{ "Title": tr("TITLE"), "Name": "SortName", "Track": { "description": tr("TITLE") } }]
        options.filter = [{ "Title": tr("All"), "Name": "All" }]
    end if

    ' If we're in a genre subfolder
    if isValid(m.top.parentItem.parentFolder)
        options.views = [
            { "Title": tr("Presentation"), "Name": "presentation", "Track": { "description": tr("Presentation") } },
            { "Title": tr("Grid"), "Name": "grid", "Track": { "description": tr("Grid") } }
        ]
    end if

    return options
end function

' Return parent collection type
function getCollectionType() as string
    return m.top.parentItem.collectionType ?? m.top.parentItem.Type
end function

' Search string array for search value. Return if it's found
function inStringArray(array, searchValue) as boolean
    for each item in array
        if lcase(item) = lcase(searchValue) then return true
    end for
    return false
end function

' Data to display when options button selected
sub setSelectedOptions(options)

    ' Set selected view option
    for each o in options.views
        if o.Name = m.view
            m.viewButton.text = o.LookupCI("title")
            o.Selected = true
        end if
    end for

    ' Set selected sort option
    for each o in options.sort
        if o.Name = m.sortField
            m.sortButton.text = o.LookupCI("title")
            o.Selected = true
        end if
    end for

    ' Set selected filter
    for each o in options.filter
        if o.Name = m.filter
            o.Selected = true
            m.filterButton.text = o.LookupCI("title")
            m.options.filter = o.Name
        end if

        ' Select selected filter options
        if isValid(o.options) and isValid(m.filterOptions)
            if o.options.Count() > 0 and m.filterOptions.Count() > 0
                if LCase(o.Name) = LCase(m.filterOptions.keys()[0])
                    selectedFilterOptions = m.filterOptions[m.filterOptions.keys()[0]].split(o.delimiter)
                    checkedState = []

                    for each availableFilterOption in o.options
                        matchFound = false

                        for each selectedFilterOption in selectedFilterOptions
                            if LCase(toString(availableFilterOption).trim()) = LCase(selectedFilterOption.trim())
                                matchFound = true
                            end if
                        end for

                        checkedState.push(matchFound)
                    end for

                    o.checkedState = checkedState
                end if
            end if
        end if
    end for

    m.options.options = options
    m.sortOrderButton.text = m.sortAscending ? "Ascending" : "Descending"
end sub

'
' Logo Image Loaded Event Handler
sub FilterDataLoaded(msg)
    options = setOptions()

    data = msg.GetData()
    m.getFiltersTask.unobserveField("filters")

    if not isValid(data) then return

    ' Add filters from the API data
    if inArray(["presentation", "grid"], m.view)
        options.filter.push({ "Title": tr("Features"), "Name": "Features", "Options": ["Subtitles", "Special Features", "Theme Song", "Theme Video"], "Delimiter": "|", "CheckedState": [] })

        if isValidAndNotEmpty(data.genres)
            options.filter.push({ "Title": tr("Genres"), "Name": "Genres", "Options": data.genres, "Delimiter": "|", "CheckedState": [] })
        end if

        if isValidAndNotEmpty(data.OfficialRatings)
            options.filter.push({ "Title": tr("Parental Ratings"), "Name": "OfficialRatings", "Options": data.OfficialRatings, "Delimiter": "|", "CheckedState": [] })
        end if

        if isValidAndNotEmpty(data.Years)
            options.filter.push({ "Title": tr("Years"), "Name": "Years", "Options": data.Years, "Delimiter": ",", "CheckedState": [] })
        end if
    end if

    setSelectedOptions(options)

    m.options.options = options
end sub


'
' Logo Image Loaded Event Handler
sub LogoImageLoaded(msg)
    data = msg.GetData()
    m.loadLogoTask.unobserveField("content")
    m.loadLogoTask.content = []

    if not isStringEqual(m.view, "presentation")
        m.itemLogo.visible = false
        return
    end if

    if data.Count() > 0
        m.itemLogo.uri = data[0]
        m.itemLogo.visible = true
    else
        m.selectedItemName.visible = true
    end if
end sub

'
'Handle loaded data, and add to Grid
sub ItemDataLoaded(msg)
    itemData = msg.GetData()
    m.loadItemsTask.unobserveField("content")
    m.loadItemsTask.content = []

    if itemData = invalid
        m.Loading = false
        return
    end if

    if isStringEqual(m.view, "Genres")
        ' Reset genre list data
        m.genreData.removeChildren(m.genreData.getChildren(-1, 0))

        for each item in itemData
            m.genreData.appendChild(item)
        end for

        m.loadedItems = m.genreData.getChildCount()

        m.itemGrid.opacity = 0
        m.genreList.opacity = 1

        m.genreList.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.genreList

        m.loading = false
        stopLoadingSpinner()

        ' Return focus to options menu if it was opened while library was loading
        if m.options.visible
            m.options.setFocus(true)
            group.lastFocus = m.options
        end if

        if m.loadedItems = 0
            m.emptyText.text = tr("No items found. Try adjusting your selected filters.")
            m.emptyText.visible = true
            m.voiceBox.setfocus(true)
            setSearchBackground(SearchButtonState.ACTIVE)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.voiceBox
        end if

        return
    end if

    ' keep focus on alpha menu if it's active
    if m.top.alphaActive
        m.alphaMenu.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.alphaMenu
    else
        m.itemGrid.opacity = "1"
        m.genreList.opacity = "0"

        m.alphaMenu.setFocus(false)
        m.itemGrid.setFocus(true)
        m.genreList.setFocus(false)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.itemGrid
    end if

    if m.data.getChildCount() = 0
        m.itemGrid.jumpToItem = 0
    end if

    m.data.appendChildren(itemData)

    'Update the stored counts
    m.loadedItems = m.itemGrid.content.getChildCount()
    m.loadedRows = m.loadedItems / m.itemGrid.numColumns
    m.Loading = false

    onItemFocused()

    'If there are no items to display, show message
    if m.loadedItems = 0
        m.selectedItemOverview.visible = false
        m.infoGroup.visible = false

        m.itemLogo.visible = false
        m.itemLogo.uri = string.EMPTY

        m.selectedItemName.visible = false

        SetName(string.EMPTY)
        SetOverview(string.EMPTY)
        SetOfficialRating(string.EMPTY)
        SetProductionYear(string.EMPTY)
        setFieldText("runtime", string.EMPTY)
        setFieldText("communityRating", string.EMPTY)
        setFieldText("criticRatingLabel", string.EMPTY)
        m.criticRatingIcon.uri = string.EMPTY
        m.star.uri = string.EMPTY

        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0

        m.emptyText.text = tr("No items found. Try adjusting your selected filters.")
        m.emptyText.visible = true
        m.voiceBox.setfocus(true)
        setSearchBackground(SearchButtonState.ACTIVE)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.voiceBox
    end if

    stopLoadingSpinner()
    ' Return focus to options menu if it was opened while library was loading
    if m.options.visible
        m.options.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.options
    end if
end sub

'
'Set Selected Name
sub SetName(itemName as string)
    m.selectedItemName.text = itemName
end sub

'
'Set Selected Overview
sub SetOverview(itemOverview as string)
    m.selectedItemOverview.text = itemOverview
end sub

'
'Set Selected OfficialRating
sub SetOfficialRating(itemOfficialRating as string)
    m.selectedItemOfficialRating.text = itemOfficialRating
end sub

'
'Set Selected ProductionYear
sub SetProductionYear(itemProductionYear)
    m.selectedItemProductionYear.text = itemProductionYear
end sub

'
'Set Background Image
sub SetBackground(backgroundUri as string)
    if not isValid(backgroundUri)
        m.backdrop.opacity = 0
    end if

    if not isStringEqual(m.view, "presentation")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    if m.loadedItems = 0
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    'If a new image is being loaded, or transitioned to, store URL to load next
    if m.swapAnimation.state <> "stopped" or m.newBackdrop.loadStatus = "loading"
        m.queuedBGUri = backgroundUri
        return
    end if

    m.newBackdrop.uri = backgroundUri
end sub

'
'Handle new item being focused
sub onItemFocused()
    focusedRow = m.itemGrid.currFocusRow

    itemInt = m.itemGrid.itemFocused

    ' If no selected item, set background to parent backdrop
    if itemInt = -1
        return
    end if

    m.itemLogo.visible = false
    m.selectedItemName.visible = false

    ' Load more data if focus is within last 5 rows, and there are more items to load
    if focusedRow >= m.loadedRows - 5 and m.loadeditems < m.loadItemsTask.totalRecordCount
        loadMoreData()
    end if

    m.communityRatingGroup.visible = false
    m.criticRatingGroup.visible = false

    if not isStringEqual(m.view, "presentation")
        return
    end if

    focusedItem = getItemFocused()

    if not isChainValid(focusedItem, "json")
        return
    end if

    itemData = focusedItem.json

    m.star.uri = "pkg:/images/sharp_star_white_18dp.png"

    if m.global.session.user.settings["ui.itemdetail.showRatings"]
        if isValid(itemData.communityRating)
            setFieldText("communityRating", int(itemData.communityRating * 10) / 10)
            m.communityRatingGroup.visible = true
        end if

        if isValid(itemData.CriticRating)
            setFieldText("criticRatingLabel", itemData.criticRating)

            tomato = "pkg:/images/rotten.png"

            if itemData.CriticRating > 60
                tomato = "pkg:/images/fresh.png"
            end if

            m.criticRatingIcon.uri = tomato
            m.criticRatingGroup.visible = true
        end if
    end if

    if isValid(itemData.Name)
        SetName(itemData.Name)
    else
        SetName(string.EMPTY)
    end if

    if isValid(itemData.Overview)
        SetOverview(itemData.Overview)
    else
        SetOverview(string.EMPTY)
    end if

    if isValid(itemData.ProductionYear)
        SetProductionYear(str(itemData.ProductionYear))
    else
        SetProductionYear(string.EMPTY)
    end if

    if type(itemData.RunTimeTicks) = "LongInteger"
        setFieldText("runtime", stri(getRuntime(itemData.RunTimeTicks)) + " mins")
    else
        setFieldText("runtime", string.EMPTY)
    end if

    if isValid(itemData.OfficialRating)
        SetOfficialRating(itemData.OfficialRating)
    else
        SetOfficialRating(string.EMPTY)
    end if

    m.loadLogoTask.itemId = itemData.id
    m.loadLogoTask.itemType = "LogoImage"
    m.loadLogoTask.observeField("content", "LogoImageLoaded")
    m.loadLogoTask.control = "RUN"

    ' Set Background to item backdrop
    if isValidAndNotEmpty(focusedItem.backdropUrl)
        SetBackground(focusedItem.backdropUrl)
    else if isValidAndNotEmpty(focusedItem.posterUrl)
        ' We have a poster image URL, request a new one at a higher resolution
        SetBackground(api.items.GetImageURL(focusedItem.id, "primary", 0, { "maxHeight": 700, "maxWidth": 1100, "quality": "90" }))
    end if
end sub

function getRuntime(runTimeTicks) as integer
    return round(runTimeTicks / 600000000.0)
end function

function round(f as float) as integer
    ' BrightScript only has a "floor" round
    ' This compares floor to floor + 1 to find which is closer
    m = int(f)
    n = m + 1
    x = abs(f - m)
    y = abs(f - n)
    if y > x
        return m
    else
        return n
    end if
end function

sub setFieldText(field, value)
    node = m.top.findNode(field)
    if node = invalid or value = invalid then return

    ' Handle non strings... Which _shouldn't_ happen, but hey
    if type(value) = "roInt" or type(value) = "Integer"
        value = str(value)
    else if type(value) = "roFloat" or type(value) = "Float"
        value = str(value)
    else if type(value) <> "roString" and type(value) <> "String"
        value = string.EMPTY
    end if

    node.text = value
end sub

'
'When Image Loading Status changes
sub newBGLoaded()
    if not isStringEqual(m.view, "presentation")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    if m.loadedItems = 0
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    'If image load was sucessful, start the fade swap
    if m.newBackdrop.loadStatus = "ready"
        m.swapAnimation.control = "start"
    end if
end sub

'
'Swap Complete
sub swapDone()
    if m.loadedItems = 0
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    if not isStringEqual(m.view, "presentation")
        m.newBackdrop.opacity = 0
        m.backdrop.opacity = 0
        return
    end if

    if isValid(m.swapAnimation) and m.swapAnimation.state = "stopped"
        'Set main BG node image and hide transitioning node
        m.backdrop.uri = m.newBackdrop.uri
        m.backdrop.opacity = 1
        m.newBackdrop.opacity = 0

        'If there is another one to load
        if m.newBackdrop.uri <> m.queuedBGUri and m.queuedBGUri <> string.EMPTY
            SetBackground(m.queuedBGUri)
            m.queuedBGUri = string.EMPTY
        end if
    end if
end sub

'
'Load next set of items
sub loadMoreData()
    if m.Loading = true then return

    startLoadingSpinner(false)
    m.Loading = true
    m.loadItemsTask.startIndex = m.loadedItems
    m.loadItemsTask.observeField("content", "ItemDataLoaded")
    m.loadItemsTask.control = TaskControl.RUN
end sub

'
'Item Selected
sub onItemSelected()
    m.top.selectedItem = m.itemGrid.content.getChild(m.itemGrid.itemSelected)
    m.top.selectedItem = invalid
end sub

'
'Returns Focused Item
function getItemFocused()
    if m.itemGrid.isinFocusChain() and isValid(m.itemGrid.itemFocused)
        return m.itemGrid.content.getChild(m.itemGrid.itemFocused)
    else if m.genreList.isinFocusChain() and isValid(m.genreList.rowItemFocused)
        return m.genreList.content.getChild(m.genreList.rowItemFocused[0]).getChild(m.genreList.rowItemFocused[1])
    end if
    return invalid
end function

'
'Genre Item Selected
sub onGenreItemSelected()
    m.top.selectedItem = m.genreList.content.getChild(m.genreList.rowItemSelected[0]).getChild(m.genreList.rowItemSelected[1])
end sub

sub processDropdownState(searchTerm as string)
    if not isStringEqual(searchTerm, string.EMPTY)
        resetDropdownsToDefaultState()
        setDropdownDisabledState(true)
        return
    end if

    setDropdownDisabledState(false)
end sub

sub setDropdownDisabledState(disabledState = false as boolean)
    m.sortButton.disabled = disabledState
    m.sortOrderButton.disabled = disabledState
    m.filterButton.disabled = disabledState
end sub

sub resetDropdownsToDefaultState()
    m.filter = "All"
    m.filterOptions = {}
    if isStringEqual(getCollectionType(), ItemType.BOXSET)
        m.sortField = "PremiereDate,SortName"
    else if isStringEqual(getCollectionType(), ItemType.MYLIST)
        m.sortField = "OrderAdded"
    else
        m.sortField = "SortName"
    end if
    m.sortAscending = true

    ' Reset view to defaults
    set_user_setting("display." + m.top.parentItem.Id + ".sortField", m.sortField)
    set_user_setting("display." + m.top.parentItem.Id + ".sortAscending", "true")
    set_user_setting("display." + m.top.parentItem.Id + ".filter", m.filter)
    set_user_setting("display." + m.top.parentItem.Id + ".filterOptions", FormatJson(m.filterOptions))

    if not isStringEqual(m.view, "Genres")
        set_user_setting(`display.${m.top.mediaType}library.defaultview`, m.view)
    end if

    m.getFiltersTask.control = "RUN"
end sub

sub onSearchTermChanged()
    m.voiceBox.hintText = m.top.searchTerm = string.EMPTY ? tr("Press OK to type") : m.top.searchTerm

    onVoiceEnabledChange()

    if isStringEqual(m.loadItemsTask.searchTerm, m.top.searchTerm) then return

    setSearchBackground(SearchButtonState.INACTIVE)

    processDropdownState(m.top.searchTerm)

    if m.bypassSearchEvent
        m.bypassSearchEvent = false
        return
    end if

    m.loadedRows = 0
    m.loadedItems = 0

    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.content = m.genreData

    loadInitialItems()
end sub

sub alphaSelectedChanged()
    ' Prevent voicebox change double firing
    if m.voiceBox.text = string.EMPTY
        ' Allow user to toggle by clicking letter twice
        if isStringEqual(m.loadItemsTask.nameStartsWith, m.top.alphaSelected)
            m.top.alphaSelected = string.EMPTY
        end if
    end if

    m.loadedRows = 0
    m.loadedItems = 0

    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.content = m.genreData

    m.loadItemsTask.nameStartsWith = m.top.alphaSelected
    m.voiceBox.text = string.EMPTY
    m.top.searchTerm = string.EMPTY
    loadInitialItems()
end sub

sub unfocusAllButtons()
    setSearchBackground(SearchButtonState.INACTIVE)
    m.sortButton.focus = false
    m.sortOrderButton.focus = false
    m.filterButton.focus = false
    m.viewButton.focus = false
end sub

sub onvoiceFilter()
    if not isValidAndNotEmpty(m.voiceBox.text) then return

    unfocusAllButtons()

    if isStringEqual(m.voiceBox.text.trim(), "reset search") then m.voiceBox.text = string.EMPTY
    if isStringEqual(m.voiceBox.text.trim(), "clear search") then m.voiceBox.text = string.EMPTY

    m.voiceBox.hintText = m.voiceBox.text

    ' If user searched for a letter, selected it from the alpha menu
    if m.voiceBox.text.len() = 1
        alphaMenu = m.top.findNode("alphaMenu")
        intConversion = m.voiceBox.text.ToInt() ' non numeric input returns as 0

        if m.voiceBox.text = "0" or (isValid(intConversion) and intConversion <> 0)
            alphaMenu.jumpToItem = 0
        else
            ' loop through each option until we find a match
            for i = 1 to alphaMenu.numRows - 1
                alphaMenuOption = alphaMenu.content.getChild(i)
                if isStringEqual(alphaMenuOption.TITLE, m.voiceBox.text)
                    alphaMenu.jumpToItem = i
                    exit for
                end if
            end for
        end if

        m.top.alphaSelected = m.voiceBox.text
        return
    end if

    if m.searchButtonDisabled
        m.itemGrid.setFocus(m.itemGrid.opacity = 1)
        m.genreList.setFocus(m.genreList.opacity = 1)
        return
    end if

    m.top.searchTerm = m.voiceBox.text.trim()
end sub

'
'Check if options updated and any reloading required
sub onOptionsVisibleChange()
    if m.options.visible then return

    reload = false

    ' Nothing changed
    if isStringEqual(m.options.filter, m.filter)
        if AssocArrayEqual(m.options.filterOptions, m.filterOptions)
            m.filterButton.focus = true
            m.filterButton.setfocus(true)
            return
        end if
    end if

    if m.options.filter <> m.filter
        m.filter = m.options.filter
        reload = true
        set_user_setting("display." + m.top.parentItem.Id + ".filter", m.options.filter)
    end if

    if not isValid(m.options.filterOptions)
        m.filterOptions = {}
    end if

    if not AssocArrayEqual(m.options.filterOptions, m.filterOptions)
        m.filterOptions = m.options.filterOptions
        reload = true
        set_user_setting("display." + m.top.parentItem.Id + ".filterOptions", FormatJson(m.options.filterOptions))
    end if

    if reload
        m.loadedRows = 0
        m.loadedItems = 0
        m.data = CreateObject("roSGNode", "ContentNode")
        m.itemGrid.content = m.data
        loadInitialItems()
    end if

    m.filterButton.focus = false

    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    group = m.global.sceneManager.callFunc("getActiveScene")
    group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
end sub

sub onSortChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    sortChoice = m.global.sceneManager.returnData

    if not isChainValid(sortChoice, "name") then return
    if isStringEqual(sortChoice.LookupCI("name"), m.sortField) then return

    m.sortButton.focus = false
    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    m.sortField = sortChoice.LookupCI("name")
    m.sortButton.text = sortChoice.LookupCI("title")

    m.sortAscending = true

    set_user_setting("display." + m.top.parentItem.Id + ".sortField", m.sortField)

    m.loadedRows = 0
    m.loadedItems = 0
    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data
    loadInitialItems()
end sub

sub onViewChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    viewChoice = m.global.sceneManager.returnData
    if not isChainValid(viewChoice, "name") then return
    if isStringEqual(viewChoice.LookupCI("name"), m.view) then return

    m.viewButton.focus = false
    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    m.view = viewChoice.LookupCI("name")
    m.viewButton.text = viewChoice.LookupCI("title")

    set_user_setting("display." + m.top.parentItem.Id + ".landing", m.view)

    ' Reset any filtering or search terms
    m.bypassSearchEvent = true
    m.top.searchTerm = string.EMPTY
    m.top.alphaSelected = string.EMPTY
    m.loadItemsTask.NameStartsWith = " "
    m.loadItemsTask.searchTerm = string.EMPTY
    m.filter = "All"
    m.filterOptions = {}
    if isStringEqual(getCollectionType(), ItemType.BOXSET)
        m.sortField = "PremiereDate,SortName"
    else if isStringEqual(getCollectionType(), ItemType.MYLIST)
        m.sortField = "OrderAdded"
    else
        m.sortField = "SortName"
    end if
    m.sortAscending = true

    ' Reset view to defaults
    set_user_setting("display." + m.top.parentItem.Id + ".sortField", m.sortField)
    set_user_setting("display." + m.top.parentItem.Id + ".sortAscending", "true")
    set_user_setting("display." + m.top.parentItem.Id + ".filter", m.filter)
    set_user_setting("display." + m.top.parentItem.Id + ".filterOptions", FormatJson(m.filterOptions))

    if not isStringEqual(m.view, "Genres")
        set_user_setting(`display.${m.top.mediaType}library.defaultview`, m.view)
    end if

    m.getFiltersTask.control = "RUN"

    m.loadedRows = 0
    m.loadedItems = 0
    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data
    loadInitialItems()
end sub

sub onSortOrderChange()
    m.global.sceneManager.unobserveFieldScoped("returnData")
    sortOrderChoice = m.global.sceneManager.returnData
    if not isChainValid(sortOrderChoice, "name") then return
    if m.sortAscending = isStringEqual(sortOrderChoice.LookupCI("name"), "ascending") then return

    m.sortOrderButton.focus = false
    m.itemGrid.setFocus(m.itemGrid.opacity = 1)
    m.genreList.setFocus(m.genreList.opacity = 1)

    m.sortAscending = isStringEqual(sortOrderChoice.LookupCI("name"), "Ascending")
    m.sortOrderButton.text = sortOrderChoice.LookupCI("title")

    set_user_setting("display." + m.top.parentItem.Id + ".sortAscending", m.sortAscending.toStr())

    m.loadedRows = 0
    m.loadedItems = 0
    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data
    loadInitialItems()
end sub

' Using the user's cursor position, determine which dropdown is above them
function getOverhangingButton()
    if m.itemGrid.isinFocusChain()
        if m.itemGrid.numColumns = 4
            shortButtonList = [m.voiceBox, m.sortButton, m.filterButton, m.viewButton]
            return shortButtonList[m.itemGrid.currFocusColumn]
        end if

        buttonList = [m.voiceBox, m.sortButton, m.sortOrderButton, m.filterButton, m.viewButton]

        columnDisplacement = (m.itemGrid.numColumns / buttonList.count())

        calculatedButtonIndex = CInt(((m.itemGrid.currFocusColumn + 1) / columnDisplacement) - 1)
        if calculatedButtonIndex < 0 then calculatedButtonIndex = 0
        if calculatedButtonIndex >= buttonList.count() then calculatedButtonIndex = buttonList.count() - 1
        return buttonList[calculatedButtonIndex]
    end if

    if m.genreList.isinFocusChain()
        if m.genreList.currFocusColumn <= 0 then return m.voiceBox
        if m.genreList.currFocusColumn <= 2 then return m.sortButton
        if m.genreList.currFocusColumn <= 3 then return m.sortOrderButton
        if m.genreList.currFocusColumn <= 5 then return m.filterButton
        return m.viewButton
    end if

    return m.voiceBox
end function


function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if isStringEqual(key, KeyCode.UP)
        if m.itemGrid.isinFocusChain() or m.genreList.isinFocusChain()
            overhangButton = getOverhangingButton()
            if overhangButton.isSubType("VoiceTextEditBox")
                setSearchBackground(SearchButtonState.ACTIVE)
            else
                overhangButton.focus = true
            end if
            overhangButton.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = overhangButton
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.OK)
        if m.voiceBox.isinFocusChain()
            if m.searchButtonDisabled
                m.global.sceneManager.callFunc("standardDialog", "Search Unavailable", { data: [`<p>${m.disabledReason}</p>`] })
                return false
            end if

            buttonData = [
                tr("Search")
            ]

            m.global.sceneManager.callFunc("keyboardDialog", "searchLibrary", tr("Search this library"), [""], buttonData, m.top.searchTerm, m.top.parentItem.Id)
            return true
        end if

        if m.sortButton.isinFocusChain()
            if m.sortButton.disabled then return false

            sortData = {
                data: m.options.options.sort
            }

            m.global.sceneManager.callFunc("radioDialog", tr("Sort By"), sortData)
            m.global.sceneManager.observeFieldScoped("returnData", "onSortChange")
            return true
        end if

        if m.sortOrderButton.isinFocusChain()
            if m.sortOrderButton.disabled then return false

            sortOrderData = {
                data: [
                    { Title: tr("Ascending"), Name: "ascending", Track: { description: tr("Ascending") } },
                    { Title: tr("Descending"), Name: "descending", Track: { description: tr("Descending") } },
                ]
            }

            if m.sortAscending
                sortOrderData.data[0].selected = true
            else
                sortOrderData.data[1].selected = true
            end if

            m.global.sceneManager.callFunc("radioDialog", tr("Sort Order"), sortOrderData)
            m.global.sceneManager.observeFieldScoped("returnData", "onSortOrderChange")
            return true
        end if

        if m.filterButton.isinFocusChain()
            if m.filterButton.disabled then return false

            m.options.visible = true
            m.options.findNode("filterMenu").setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.options
            return true
        end if

        if m.viewButton.isinFocusChain()
            viewData = {
                data: m.options.options.views
            }

            m.global.sceneManager.callFunc("radioDialog", tr("View"), viewData)
            m.global.sceneManager.observeFieldScoped("returnData", "onViewChange")
            return true
        end if
    end if

    if m.dropdownOptions.isinFocusChain()
        if isStringEqual(key, KeyCode.LEFT)
            if m.voiceBox.isinFocusChain()
                setSearchBackground(SearchButtonState.INACTIVE)
                m.sortButton.focus = false
                m.sortOrderButton.focus = false
                m.viewButton.focus = false
                m.filterButton.focus = false

                m.top.alphaActive = true
                m.alphaMenu.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.alphaMenu
                return true
            end if

            if m.sortButton.isinFocusChain()
                m.voiceBox.setFocus(true)
                setSearchBackground(SearchButtonState.ACTIVE)
                m.sortButton.focus = false
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.voiceBox
                return true
            end if

            if m.sortOrderButton.isinFocusChain()
                m.sortButton.focus = true
                m.sortButton.setFocus(true)
                m.sortOrderButton.focus = false
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortButton
                return true
            end if

            if m.filterButton.isinFocusChain()
                m.filterButton.focus = false
                m.sortOrderButton.focus = true
                m.sortOrderButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortOrderButton
                return true
            end if

            if m.viewButton.isinFocusChain()
                m.viewButton.focus = false
                m.filterButton.focus = true
                m.filterButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.filterButton
                return true
            end if
        end if

        if isStringEqual(key, KeyCode.Right)
            if m.voiceBox.isinFocusChain()
                setSearchBackground(SearchButtonState.INACTIVE)
                m.sortButton.focus = true
                m.sortButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortButton
                return true
            end if

            if m.sortButton.isinFocusChain()
                m.sortButton.focus = false
                m.sortOrderButton.focus = true
                m.sortOrderButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.sortOrderButton
                return true
            end if

            if m.sortOrderButton.isinFocusChain()
                m.sortOrderButton.focus = false
                m.filterButton.focus = true
                m.filterButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.filterButton
                return true
            end if

            if m.filterButton.isinFocusChain()
                m.filterButton.focus = false
                m.viewButton.focus = true
                m.viewButton.setFocus(true)
                group = m.global.sceneManager.callFunc("getActiveScene")
                group.lastFocus = m.viewButton
                return true
            end if
        end if

        if isStringEqual(key, KeyCode.DOWN)
            if m.loadedItems = 0 then return false

            setSearchBackground(SearchButtonState.INACTIVE)
            m.sortButton.focus = false
            m.sortOrderButton.focus = false
            m.viewButton.focus = false
            m.filterButton.focus = false

            m.itemGrid.setFocus(m.itemGrid.opacity = 1)
            m.genreList.setFocus(m.genreList.opacity = 1)

            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.itemGrid
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.LEFT) and m.voiceBox.isinFocusChain()
        m.itemGrid.setFocus(m.itemGrid.opacity = 1)
        m.genreList.setFocus(m.genreList.opacity = 1)
        m.voiceBox.setFocus(false)
        setSearchBackground(SearchButtonState.INACTIVE)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
    end if

    if isStringEqual(key, KeyCode.BACK)
        ' If user pressed back whole scrolled down the grid, reset to item 1
        if m.itemGrid.isinFocusChain() or m.genreList.isinFocusChain()
            gridComponent = m.itemGrid.isinFocusChain() ? m.itemGrid : m.genreList

            if gridComponent.itemFocused = 0
                reclaimResources()
                m.global.sceneManager.callfunc("popScene")
                return true
            end if

            gridComponent.jumpToItem = 0
            return true
        end if

        reclaimResources()
        m.global.sceneManager.callfunc("popScene")
        return true
    end if

    if isStringEqual(key, KeyCode.PLAY)
        itemToPlay = getItemFocused()

        if isValid(itemToPlay)
            m.top.quickPlayNode = itemToPlay
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.LEFT)
        if m.itemGrid.isinFocusChain()
            m.top.alphaActive = true
            m.itemGrid.setFocus(false)
            m.alphaMenu.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.alphaMenu
            return true
        else if m.genreList.isinFocusChain()
            m.top.alphaActive = true
            m.genreList.setFocus(false)
            m.alphaMenu.setFocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.alphaMenu
            return true
        end if
    end if

    if isStringEqual(key, KeyCode.RIGHT) and m.alpha.isinFocusChain()
        m.top.alphaActive = false
        m.alphaMenu.setFocus(false)

        if m.loadedItems = 0
            m.sortButton.focus = true
            m.sortButton.setfocus(true)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.sortButton
        else
            m.itemGrid.setFocus(m.itemGrid.opacity = 1)
            m.genreList.setFocus(m.genreList.opacity = 1)
            group = m.global.sceneManager.callFunc("getActiveScene")
            group.lastFocus = m.itemGrid.opacity = 1 ? m.itemGrid : m.genreList
        end if

        return true
    end if

    if isStringEqual(key, KeyCode.OPTIONS)
        focusedItem = getItemFocused()
        if not isValid(focusedItem) then return false

        m.loadItemsTask1.itemId = focusedItem.LookupCI("id")
        m.loadItemsTask1.observeField("content", "onMyListLoaded")
        m.loadItemsTask1.itemsToLoad = "isInMyList"
        m.loadItemsTask1.control = TaskControl.RUN
        return true
    end if

    return false
end function

sub onMyListLoaded()
    isInMyListData = m.loadItemsTask1.content
    m.loadItemsTask1.content = []
    m.loadItemsTask1.unobserveField("content")

    if not isValidAndNotEmpty(isInMyListData) then return

    focusedItem = getItemFocused()
    if not isValid(focusedItem) then return

    dialogData = isInMyListData[0] ? [tr("Remove From My List")] : [tr("Add To My List")]
    dialogData.push(tr("Add To Playlist"))
    paramData = {
        id: focusedItem.LookupCI("id")
    }

    if isChainValid(focusedItem, "watched")
        if focusedItem.watched
            dialogData.push(tr("Mark As Unplayed"))
        else
            dialogData.push(tr("Mark As Played"))
        end if
    end if

    if inArray([ItemType.EPISODE, ItemType.SEASON], focusedItem.LookupCI("type"))
        dialogData.push(tr("Go To Series"))
        dialogData.push(tr("Go To Season"))
        paramData.SeasonId = focusedItem.json.LookupCI("SeasonId")
        paramData.SeriesId = focusedItem.json.LookupCI("SeriesId")
    end if

    m.global.sceneManager.callFunc("optionDialog", "libraryitem", focusedItem.LookupCI("title") ?? tr("Options"), [], dialogData, paramData)
end sub

sub reclaimResources()
    m.loadItemsTask.control = TaskControl.STOP
    m.loadItemsTask.content = []

    m.data = CreateObject("roSGNode", "ContentNode")
    m.itemGrid.content = m.data

    m.genreData = CreateObject("roSGNode", "ContentNode")
    m.genreList.content = m.genreData
end sub

sub setSearchBackground(state)
    if state = SearchButtonState.ACTIVE
        if m.searchButtonDisabled
            m.voiceBox.textColor = ColorPalette.MIDGREY
            m.voiceBox.hintTextColor = ColorPalette.MIDGREY
            m.voiceBoxBackground.blendColor = ColorPalette.DARKGREY
            return
        end if

        m.voiceBox.textColor = ColorPalette.WHITE
        m.voiceBox.hintTextColor = ColorPalette.WHITE
        m.voiceBoxBackground.blendColor = ColorPalette.HIGHLIGHT
        return
    end if

    if state = SearchButtonState.DISABLED
        m.voiceBox.textColor = ColorPalette.DARKGREY
        m.voiceBox.hintTextColor = ColorPalette.DARKGREY
        m.voiceBoxBackground.blendColor = ColorPalette.MIDGREY
        return
    end if

    m.voiceBox.textColor = ColorPalette.MIDGREY
    m.voiceBox.hintTextColor = ColorPalette.MIDGREY
    m.voiceBoxBackground.blendColor = ColorPalette.WHITE
end sub

sub disableSearch(disabledReason as string)
    m.disabledReason = disabledReason
    m.searchButtonDisabled = true
    m.voiceBox.voiceEnabled = false
    m.voiceBox.hintText = "Search Unavailable"
    setSearchBackground(SearchButtonState.DISABLED)
end sub
